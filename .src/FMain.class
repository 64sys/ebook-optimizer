' Gambas class file

'Public cntr As Container            ' Panel intPagecontenedor de las miniaturas.

'Public bolLoaded As Boolean         ' Marcador de indicacion del estado del carga del PDF.
'Public strMetaFile As String        ' Archivo contenedor de los metadatos del libro.
'Public intPage As Integer           ' Página actual.

'Public inxPages As New Integer[]    ' Lista de paginas del archivo pdf actual, que pueden no coincidir en orden y cantidad con el PDF ya que luego se manipula.
'Public stxPImages As New String[]   ' Imagenes de las páginas.
'Public strTxtFile As String         ' Archivo de texto concordante con la página actual.
'Public stxHtml As New String[]      ' Lista de archivos generados en sintaxis html simple.
'Public inxProc As New Integer[]     ' Lista de paginas del archivo pdf a procesar.
'Public stxChap As New String[]      ' Lista de los capítulos del libro.
'Public stxContent As New String[]   ' Lista del contenido del libro, donde cada item es un capítulo.

'Metadatos del Epub > content.opf
Public stxMTags As New String[]     ' Lista de etiquetas de metadatos.
Public stxMTitl As New String[]     ' Lista de títulos para las etiquetas de metadatos.
Public stxMTips As New String[]     ' Lista de mensajes emergentes para las etiquetas de metadatos.
Public stxMVals As New String[]     ' Lista de valores para los metadatos del libro como autor, titulo etc.

'Contenedor oasis del Epub > container.xml
Public stxXTags As New String[]     ' Lista de etiquetas del contenedor.
Public stxXVals As New String[]     ' Lista de valores para los metadatos del libro como autor, titulo etc.

'Contenedor del Epub Text, Images, Styles
Public stxChrs As New String[]      ' Lista del texto donde cada ítem es un capítulo completo.
Public stxImgs As New String[]      ' Lista de las imagenes del libro.

'Directorios.
Public strAppDir As String          ' Directorio de la aplilcación.
Public strJOB As String             ' Directorio de trabajo.
Public strPDF As String             ' Archivo PDF actual.

'Archivos a importar y variables de contenido de paginas
Private pdfFile As New PdfDocument
Public stxPages As New String[]     ' Lista con la ruta de los archivos de texto con el contenido de cada página.

'Parametros para OCR
Public strLang As String            ' Idioma por defecto para OCR

'Private strOpti As String         ' Ruta completa del archivo de configuración del proyecto
Private strBaseName As String       ' Nombre base que se usa para crear un directorio donde se colocaran todos los archivos y tambien para nombrar el EPUB
Private strEPUB As String           ' Ruta completa del archivo EPUB
'Private strBaseDir As String
Private strTextDir As String
Private strImagesDir As String
Private strStylesDir As String
'Aux. dirs.
Private strHtmlPage As String       ' Ruta al archivo HTML generado de cada pagina.
'Private strPagesDir As String       ' Directorio donde se guardan las páginas extraidas en formato html.
Private strTmpDir As String         ' Directorio donde se guardan los archivos de texto.

'Indicacion de procesos o trabajo
Public strClocky As String          ' Cadena de texto usada para simular un reloj.
Public intQtyPages As Integer       ' Cantidad de paginaas a procesar.
' Imagenes, posproceso y otros.
Public strImgMod As String          ' Modificador para posproceso de imágenes.

' Bastidores y contenido para el TextEditor
Public strTextFile As String         ' Archivo de texto asignado al editor.
Public intIniPos As Integer          ' Posición de inicio de la selección
Public intIniLine As Integer         ' Línea de inicio de la selección
Public intEndPos As Integer          ' Posición de fin de la selección
Public intEndLine As Integer         ' Línea de fin de la selección
Public strSelText As String          ' Texto seleccionado

Public intPosLine As Integer         ' Línea en la que se encuentra el cursor
Public intPosColu As Integer         ' Columna en la que se encuentra el cursor
Public strLineText As String          ' Texto de la linea en la que se encuentra el cursor
Public strBefText As String          ' Texto inmediatamnete anterior a localizacion del cursor
Public strAftText As String          ' Texto inmediatamnete posterior a localizacion del cursor

' Temas del editor
Public strEditorMode As String      ' Modo del editor
Public strEditorWrap As String      ' Ajuste de línea
Public stxShCutCode As New String[] ' Lista de codigos de combinaciones de teclas
Public stxShCutName As New String[] ' Lista de nombres de combinaciones de teclas
Public stxThemes As New String[]    ' Lista de temas disponibles.
Public strThemeCurrent As String    ' Tema alctual del TextEditor.
Public stxThemeTag As New String[]  ' Lista de nombres de los parámetros del tema actual del TextEditor.
Public stxThemeVal As New String[]  ' Lista de parametros del tema actual del TextEditor.

'' Operaciones con los archivos ##################################################
'#################################################################################
' Crear un nuevo EPUB
Public Sub mnuNewEPUB_Click()
  
  NewEPUB()
  
End

Public Sub tobNewEPUB_Click()
  
  NewEPUB()
  
End

' Abrir un EPUB existente
Public Sub mnuOpenEPUB_Click()
  
  OpenEPUB()
  
End

Public Sub tobOpenEPUB_Click()
  
  OpenEPUB()
  
End

' Crear un nuevo EPUB importando un PDF
Public Sub mnuNewEPUBFromFile_Click()
  
  NewEPUBFromFile()
  
End

Public Sub tobNewEPUBFromFile_Click()
  
  NewEPUBFromFile()
  
End

Public Sub tobOpenJobDirectory_Click()
  
  OpenJobDirectory()
  
End

Public Sub mnuOpenJobDirectory_Click()
  
  OpenJobDirectory()
  
End

Public Sub mnuSaveModelAs_Click()
  
  SaveModelAs()
  
End

Public Sub tobSaveModelAs_Click()
  
  SaveModelAs()
  
End

Public Sub SaveModelAs()
  
  Dim strDir As String
  
  If Exist(strDir) = False Then
    Try Mkdir strDir
  Endif
  
  If Exist(strDir) = True Then
    Try Copy strJOB To strDir
    Wait 0.01
    
  Endif
  
  If DirOptimizer(strDir) = True Then
    OpenJobDirectory(strDir)
  Endif
  
End

Public Sub NewEPUBFromFile() '' Esta subrutina se encarga de crear un archivo EPUB con la informacion extraída desde otro archivo. De momento solo esta soportado el tipo PDF.
  
  'Dim int As Integer
  Dim stxFiles As New String[]
  
  NewEPUB() ' Crea el nuevo directorio de trabajo y carga las varialbes.
  
  'TreeView2.Visible = False
  
  ' Eligiendo el archivo a importar
  stxFiles = GEFDesk.FileChooser(, ["pdf"])
  
  Select stxFiles.Count
    Case 0
      Print "Cancelado"
    Case Else
      strPDF = strJOB &/ "ebookoptimizer.pdf"
      
      If GEFBatch.PDFOptimize(stxFiles[0], strPDF) = strPDF Then
        
        ' Eligiendo el nombre y ubicacion del archibvo EPUB
        'pdfFile.Open(strPDF)
        ReadPage(strPDF)
        If stxPages.Count > 0 Then
          'LoadTreePages()
        Endif
        
      Endif
      
  End Select
  
  DataCreation("content")
  DataCreation("container")
  
  LoadTreeEPUB()
  'LoadTreePages()
  
End

Public Function NewEPUB() As String '' Esta subrutina define el directorio de trabajo temporal y luego carga todos los datos en la variables dejando preparado el terreno para editar un epub desde dcero.
  
  strJOB = "/tmp/" & "ebz" & GEFUtility.Timestamp(Now())
  strPDF = ""
  
  CheckDirs(strJOB)
  
  OpenJobDirectory(strJOB)
  
  '  DataCreation("content")
  '  DataCreation("container")
  
End

Public Function DataCreation(strMode As String) As String[] '' Este módulo crea todas las variables y les pone los datos básicos para crear un epub en blanco al momento de guardar. Como parametro de entrada requiere el tipo de datos a generar, content.opf o container.xml
  
  Dim int As Integer
  
  Select strMode
    Case "content"
      ' Lista de gestión del contenido > archivo content.opf
      stxMTags = GEFEpub.CreateContentTagsNames()
      stxMTitl = GEFEpub.CreateContentTagsTitles()
      stxMTips = GEFEpub.CreateContentTagsTooltips()
      stxMVals.Clear
      For int = 0 To stxMTags.Max
        stxMVals.Add("")
      Next
      
      Return stxMTags
      
    Case "container"
      ' Lista de gestión del continente > archivo  container.xml
      stxXTags = GEFEpub.CreateContainerTagsNames()
      
      For int = 0 To stxXTags.Max
        stxXVals.Add("")
      Next
      Return stxXTags
  End Select
  
End

Public Sub OpenEPUB() '' Esta subrutina abre un EPUB existente.
  
  Dim strPath As String
  
  Dialog.OpenFile()
  strPath = Dialog.Path
  
  If strPath <> "" Then
    HSplit1.Layout = [3, 0, 6]
    
  Endif
  
End

Public Sub OpenJobDirectory(Optional strDirectory As String)
  
  Dim strPath As String
  
  If strDirectory = False Then
    Dialog.SelectDirectory()
    strPath = Dialog.Path
  Else
    strPath = strDirectory
  Endif
  
  Select strPath
      
    Case ""
      Print "Cancelado"
    Case Else
      
      strJOB = strPath
      CheckDirs(strJOB)
      
      If DirOptimizer(strJOB) = True Then
        
        DataCreation("content")
        DataCreation("container")
        
        HSplit1.Layout = [3, 0, 6]
        
        LoadTreeEPUB()
        
      Endif
      
  End Select
  
End

'' Editor de código HTML #########################################################
'#################################################################################

Public Sub tobSaveCode_Click()
  
  SaveCode()
  TextLabelLoad()
  
End

Public Sub SaveCode()
  
  TextEditor1.Save(strTextFile)
  
End

Public Sub tobTextWrap_Click()
  
  Select strEditorWrap
      
    Case "wrap-yes"
      TextEditor1.Wrap = False
      strEditorWrap = "wrap-no"
      
    Case "wrap-no"
      TextEditor1.Wrap = True
      strEditorWrap = "wrap-yes"
  End Select
  
End

Public Sub togHideToggle_Click()
  
  Dim str As String
  
  str = TextEditor1[intIniLine].Text
  
  TextEditor1[intIniLine].Text = HideToggle(str)
  
End

Public Sub tobShowImagesInPage_Click()
  
  'Dim int As Integer
  'Dim str As String
  
  SaveCode()
  ShowText()
  
End

' Public Sub DocumentView1_MouseDown()
'
'   HSplit2.Layout = [7, 1]
'
' End

' Public Sub TextLabel1_MouseDown()
'
'   HSplit2.Layout = [7, 1]
'
' End

Public Sub TextEditor1_MouseDown()
  
  'HSplit2.Layout = [1, 7]
  
  intIniPos = TextEditor1.Column
  intIniLine = TextEditor1.Line
  
End

' Resto del código ##############################################################
'################################################################################

' Public Sub cmdOpenFIle()
'
'   Dim stx As New String[]
'
'   stx = GEFDesk.FileChooser()
'
'   If stx.Count > 0 Then
'
'     strFile = GEFBatch.PDFOptimize(stx[0])
'
'     'strFile = stx[0]
'
'     CheckDirs(strFile)
'
'     'ResetAll()
'
'     inxPages.Clear
'     inxProc.Clear
'
'     inxPages.Insert(ListPages(strFile))
'     inxProc.Insert(inxPages)
'
'     intQtyPages = inxProc.Count
'
'     strClocky = "--"
'
'     If LoadPages(inxPages) = intQtyPages Then
'       bolLoaded = True
'       UpdateInfo()
'     Else
'       bolLoaded = False
'     Endif
'
'     tobMetaEdit.Enabled = True
'
'   Endif
'
'  MetaFromPDF()
'
' End

Public Sub Form_Open()
  
  Dim strColor As String
  Dim int As Integer
  
  strAppDir = User.Home &/ "." & Application.Name
  
  strEditorWrap = Settings["EditorWrap", "wrap-no"]
  strEditorMode = "none"
  EditorMode(strEditorMode)
  
  strLang = Settings["lang", "spa"]
  
  If Exist(strAppDir) = False Then
    Try Mkdir strAppDir
  Endif
  
  '0)Creacion y copia de los archivos de tema para el editor
  If Exist(strAppDir &/ "editor-themes") = False Then
    Try Mkdir strAppDir &/ "editor-themes"
    Wait 0.01
    stxThemes.Clear
    stxThemes = GEFUtility.RListFiles("./editor-themes/", ["theme"])
    If stxThemes.Count > 0 Then
      For int = 0 To stxThemes.Max
        Try Copy stxThemes[int] To strAppDir &/ "editor-themes" &/ File.Name(stxThemes[int])
      Next
      
    Endif
    
  Endif
  
  HSplit1.Layout = [3, 0, 6]
  
  ChkTheme()
  
  strColor = Color.Foreground
  
  ' Lista de atajos del TextEditor
  stxShCutCode.Add("ctrl+1")
  stxShCutName.Add("h1")
  
  stxShCutCode.Add("ctrl+2")
  stxShCutName.Add("h2")
  
  stxShCutCode.Add("ctrl+v")
  stxShCutName.Add("paste")
  
  stxShCutCode.Add("ctrl+a")
  stxShCutName.Add("selectall")
  
  stxShCutCode.Add("ctrl+c")
  stxShCutName.Add("copy")
  
  stxShCutCode.Add("ctrl+ins")
  stxShCutName.Add("copy")
  
  stxShCutCode.Add("ctrl+v")
  stxShCutName.Add("paste")
  
  stxShCutCode.Add("shift+ins")
  stxShCutName.Add("paste")
  
  stxShCutCode.Add("ctrl+x")
  stxShCutName.Add("cut")
  
  stxShCutCode.Add("shift+del")
  stxShCutName.Add("cut")
  
  stxShCutCode.Add("ctrl+y")
  stxShCutName.Add("redo")
  
  stxShCutCode.Add("ctrl+z")
  stxShCutName.Add("undo")
  
End

Public Sub PictureBox1_Drag()
  
  Print "drag"
  
End
'
' Public Function LoadTreePages() As Integer '' Carga las páginas en el treeview.
'
'   Dim stx As New String[]
'   Dim int As Integer
'
'   TreeView1.Clear
'   TreeView1.Add("pages", ("Páginas"))
'   If stxPages.Count > 0 Then
'     For int = 0 To stxPages.Max
'       TreeView1.Add(stxPages[int], "\t" & File.Name(stxPages[int]),, "txt")
'     Next
'   Endif
'   TreeView1["pages"].Expanded = True
'
'   Return stx.Count
'
' End

Public Function LoadTreeEPUB() As Integer '' Carga los componentes de un archivo EPUB, como los capítulos o secciones, los metadatos las imagenes etc. Crea una estructura para poder "moverse" por el epub que se esta maquetando o para editar algun detalle en particular.
  
  Dim stx As New String[]
  Dim int As Integer
  Dim strNode As String
  
  ' Lo primero es crear la estructura base de un EPUB
  TreeView2.Clear
  
  TreeView2.Add("txt", ("Páginas"), Picture["icon:/16/text-fill"])
  
  ' If stxPages.Count > 0 Then
  '   For int = 0 To stxPages.Max
  '     TreeView2.Add(stxPages[int], File.BaseName(stxPages[int]),, "pages")
  '   Next
  ' Endif
  'TreeView2["pages"].Expanded = True
  
  TreeView2.Add("epub", stxMVals[0], Picture["./application-epub+zip.svg"])
  
  TreeView2.Add("xhtml", "Text", Picture["icon:/16/html"], "epub")
  TreeView2.Add("png", "Images", Picture["icon:/16/image"], "epub")
  TreeView2.Add("css", "Styles", Picture["icon:/16/css"], "epub")
  
  stx = GEFUtility.RListFiles(strTextDir, ["xhtml"], False)
  stx.Insert(GEFUtility.RListFiles(strImagesDir, ["png"], False))
  stx.Insert(GEFUtility.RListFiles(strStylesDir, ["css"], False))
  stx.Insert(GEFUtility.RListFiles(strTmpDir, ["txt"], False))
  stx.Sort
  
  If stx.Count > 0 Then
    For int = 0 To stx.Max
      strNode = String.LCase(File.Ext(stx[int]))
      
      Select strNode
        Case "txt"
          TreeView2.Add(stx[int], " " & File.Name(stx[int]),, strNode)
        Case Else
          TreeView2.Add(stx[int], File.Name(stx[int]),, strNode)
      End Select
      
    Next
  Endif
  TreeView2["epub"].Expanded = True
  TreeView2["xhtml"].Expanded = True
  
  Return stx.Count
  
End

Public Function LoadPages(Optional inxPge As Integer[]) As Integer '' Funcion que carga la paginas de un archivo pdf y crea una imagen por cada página dentro de un contenedor que se pasa como parametro, generalmente un scrollview. Luego devuelve un numero entero indicando la cantidad de paginas cargadas.
  
  ' Dim strType As String
  ' Dim int As Integer
  ' Dim intPw As Integer
  ' Dim intPh As Integer
  ' Dim img As Image
  ' Dim pio As Picture
  ' Dim intTot As Integer
  ' Dim pnl As Panel
  ' Dim pixPage As PictureBox
  ' Dim stxTmp As New String[]
  ' Dim intImg As Integer
  '
  ' bolLoaded = False
  ' stxPImages.Clear
  '
  ' If Exist(strPDF) = True Then
  '
  '   strType = String.LCase(Split(GEFUtility.FileInfo(strPDF)[7], "\t")[1])
  '
  '   If InStr(strType, "pdf document") > 0 Then
  '     pdfFile.Open(strPDF)
  '   Endif
  ' Endif
  '
  ' If pdfFile.Ready = True Then
  '
  '   intTot = pdfFile.Count
  '   cntr.Children.Clear
  '
  '   Select inxPge.Count
  '     Case 0
  '       For int = 0 To intTot - 1
  '         inxPge.Add(int)
  '       Next
  '   End Select
  '
  '   For int = 0 To inxPge.Max
  '     'Extraccion de las imagenes del PDF
  '     stxTmp.Clear
  '     'Actualizacion de la etiqueta del formulario con la informacion actual.
  '     UpdateInfo()
  '
  '     stxTmp = ImageExtract(int + 1)
  '
  '     If stxTmp.Count > 0 Then
  '       For intImg = 0 To stxTmp.Max
  '         '     Try Move "/tmp" &/ stxTmp[intImg] To strImagesDir &/ File.Name(stxTmp[intImg])
  '         stxPImages.Add(File.Name(stxTmp[intImg]))
  '       Next
  '     Endif
  '
  '     intPw = cntr.W - 14
  '     intPh = intPw * 1.41 '0.7071
  '
  '     intPage = inxPge[int]
  '
  '     img = pdfFile[intPage].Image
  '     img.Stretch(intPw, intPh)
  '     pio = img.Picture
  '
  '     pnl = New Panel(cntr)
  '
  '     With pnl
  '       .Arrangement = Arrange.Vertical
  '       .Margin = True
  '       .Name = CStr(intPage)
  '       .Tag = intPage
  '       .W = intPw - 14
  '       .H = intPh - 14
  '
  '       If inxProc.Find(intPage) = -1 Then
  '         .BackGround = Color.Background
  '       Else
  '         .BackGround = Color.DarkCyan
  '       Endif
  '
  '     End With
  '
  '     pixPage = New PictureBox(pnl) As "Pages"
  '
  '     With pixPage
  '       .Picture = pio
  '       .W = intPw - 28
  '       .H = intPh - 28
  '       .Tag = inxPge[int]
  '       .Stretch = True
  '       .Refresh
  '       .Drop = True
  '     End With
  '
  '   Next
  '
  ' Endif
  '
  ' Return intTot
  
End

' Public Sub DocumentView2_Layout(Page As Integer)
'
'   DocumentView2.Layout.Width = pdfFile[Page + 1].Width
'   DocumentView2.Layout.Height = pdfFile[Page + 1].Height
'
' End
'
' Public Sub DocumentView2_Draw(Page As Integer, Width As Integer, Height As Integer)
'
'   Paint.DrawImage(pdfFile[Page + 1].Image, 0, 0, Paint.Width, Paint.Height)
'   Print "Draw page " & Page
'
' End

Public Function ListPages(strFilex As String) As Integer[]
  
  Dim inxOut As New Integer[]
  Dim strType As String
  Dim int As Integer
  
  If Exist(strFilex) = True Then
    strType = String.LCase(Split(GEFUtility.FileInfo(strFilex)[7], "\t")[1])
    If InStr(strType, "pdf document") > 0 Then
      pdfFile.Open(strFilex)
    Endif
  Endif
  
  For int = 1 To pdfFile.Count
    inxOut.Add(int)
  Next
  
  pdfFile.Close
  
  Return inxOut
  
End

Public Sub Pages_MouseDown()
  
  ' Dim obj As Object
  ' Dim intKey As Integer
  '
  ' Select Mouse.Button
  '   Case 3
  '     obj = Last
  '     intPage = obj.Tag
  '     intKey = inxProc.Find(intPage)
  '     If intKey > -1 Then
  '       inxProc.Remove(intKey, 1)
  '       intQtyPages = inxProc.Count
  '       obj.Parent.BackGround = Color.Background
  '     Else
  '       inxProc.Add(intPage)
  '       intQtyPages = inxProc.Count
  '       obj.Parent.BackGround = Color.DarkCyan
  '     Endif
  '   Case 1
  '     obj = Last
  '     intPage = obj.Tag
  '     ShowText()
  '     'Read(intPage)
  '
  ' End Select
  
End

' Public Sub cmoLang_Change()
'
'   strLang = cmoLang.Text
'
' End

' Public Sub tobResetAll_Click()
'
'   ResetAll()
'
' End

Public Sub tobLanguage_Click()
  
  FLang.ShowModal()
  
End

Public Function ImageExtract(intPag As Integer) As String[] '' Devuelve una lista d elas imagenes extraídas de una pagina de un PDF.
  
  Dim stx As New String[]
  Dim stxPngDelete As New String[]
  Dim strImgDelete As String
  Dim intImg As Integer
  
  ' strImgMod = cboImgMod.Text
  
  stxPngDelete.Clear
  stxPngDelete = GEFUtility.RListFiles("/tmp", ["png"])
  
  If stxPngDelete.count > 0 Then
    For Each strImgDelete In stxPngDelete
      Try Kill strImgDelete
    Next
  Endif
  
  'Select strImgMod
  '  Case ""
  stx = GEFBatch.PDFExtractImages(strPDF, intPag)
  '  Case Else
  '    stx = GEFBatch.PDFExtractImages(strPDF, intPag, strImgMod)
  'End Select
  
  If stx.Count > 0 Then
    For intImg = 0 To stx.Max
      
      Try Move "/tmp" &/ stx[intImg] To strImagesDir &/ File.Name(stx[intImg])
      'stxPImages.Add(File.Name(stx[intImg]))
    Next
  Endif
  
  Return stx
  
End

Public Function MetaBlank() As String[] '' Devuelve la listade metadatos para usarlos en la creacion del EPUB, si no se le pasan parametros entonces devuelve todos los metadatos en blanco. La forma de los ítemes de la matriz es TAG\tValue
  
  Dim stxTags As New String[]
  Dim stxOut As New String[]
  
  stxTags = GEFEpub.MetaBlank()
  If stxTags.Count > 0 Then
    
  Endif
  
  Return stxOut
  
End

Public Sub MetaFromPDF() '' Devuelve la listade metadatos del documento PDF e intenta ordenarlos para usarlos en la creacion del EPUB.
  
  ' Dim int As Integer
  ' Dim strTmp As String
  ' Dim stxTmp As New String[]
  ' Dim strTag As String
  ' Dim strVal As String
  ' Dim intKey As Integer
  '
  ' strMetaFile = File.Dir(strEPUB) &/ File.BaseName(strEPUB) & ".meta"
  '
  ' stxMTags = GEFEpub.CreateContentTagsNames()
  ' stxMTitl = GEFEpub.CreateContentTagsTitles()
  ' stxMTips = GEFEpub.CreateContentTagsTooltips()
  ' stxMVals.Clear
  '
  ' Select Exist(strMetaFile)
  '   Case True
  '
  '     For int = 0 To stxMTags.Max
  '       stxMVals.Add("")
  '     Next
  '
  '     strTmp = File.Load(strMetaFile)
  '     If InStr(strTmp, "\t") > 0 Then
  '       stxTmp = Split(strTmp, "\n")
  '       For int = 0 To stxTmp.Max
  '         If InStr(stxTmp[int], "\t") > 0 Then
  '           strTag = Split(stxTmp[int], "\t")[0]
  '           strVal = Split(stxTmp[int], "\t")[1]
  '           intKey = stxMTags.Find(strTag)
  '           If intKey > -1 Then
  '             stxMVals[intKey] = strVal
  '           Endif
  '         Endif
  '       Next
  '     Endif
  '   Case False
  '     If stxMTags.Count > 0 Then
  '       For int = 0 To stxMTags.Max
  '         Select stxMTags[int]
  '           Case "title"
  '             stxMVals.Add(pdfFile.Info.Title)
  '           Case "creator"
  '             stxMVals.Add(pdfFile.Info.Author)
  '           Case "date"
  '             stxMVals.Add(pdfFile.Info.CreationDate)
  '           Case Else
  '             stxMVals.Add("")
  '         End Select
  '       Next
  '     Endif
  ' End Select
  
End

' Private Sub CreateMetaList() As String[] '' Crea una lista de los campos de metadatos y de los titulos en el idioma en que este corriendo el programa en las variables globales.
'
' End

Public Sub ChkTheme(Optional strPath As String) '' Carga el tema de visualizacion para el TextEditor
  
  Dim int As Integer
  Dim strNameTmp As String
  Dim strFileRaw As String
  Dim intVal As Integer
  Dim strVal As String
  Dim strLine As String
  
  If strPath = "" Then
    strPath = strAppDir &/ "editor-themes/"
  Endif
  
  If Settings["CurrentTheme", ""] = "" Then
    strThemeCurrent = "dark"
  Endif
  
  stxThemes.Clear
  stxThemes = GEFUtility.RListFiles(strAppDir &/ "editor-themes/", ["theme"])
  stxThemeTag.Clear
  stxThemeVal.Clear
  
  If stxThemes.Count > 0 Then
    For int = 0 To stxThemes.Max
      strNameTmp = File.BaseName(stxThemes[int])
      
      If strNameTmp = strThemeCurrent Then
        If Exist(stxThemes[int]) Then
          strFileRaw = File.Load(stxThemes[int])
          
          For Each strLine In Split(strFileRaw, "\n")
            
            If InStr(strLine, "=") > 0 Then
              stxThemeTag.Add(Split(strLine, "=")[0])
              stxThemeVal.Add(Split(strLine, "=")[1])
            Endif
            
          Next
          
        Endif
        
      Endif
      
    Next
    
  Endif
  
  With TextEditor1
    For intVal = 0 To stxThemeTag.Max
      strVal = Replace(stxThemeVal[intVal], "#", "&H")
      strVal = Replace(strVal, "\"", "")
      Select stxThemeTag[intVal]
        Case "Background"
          .Styles[Highlight.Background].Color = Val(strVal)
        Case "Normal"
          .Styles[Highlight.Normal].Color = Val(strVal)
        Case "Keyword"
          .Styles[Highlight.Keyword].Color = Val(Split(strVal, ",")[0])
        Case "Datatype"
          .Styles[Highlight.DataType].Color = Val(strVal)
        Case "Function"
          .Styles[Highlight.Function].Color = Val(strVal)
        Case "Operator"
          .Styles[Highlight.Operator].Color = Val(Split(strVal, ",")[0])
        Case "Symbol"
          .Styles[Highlight.Symbol].Color = Val(strVal)
        Case "Number"
          .Styles[Highlight.Number].Color = Val(strVal)
        Case "String"
          .Styles[Highlight.String].Color = Val(strVal)
        Case "Comment"
          .Styles[Highlight.Comment].Color = Val(Split(strVal, ",")[0])
        Case "Help"
          .Styles[Highlight.Help].Color = Val(Split(strVal, ",")[0])
        Case "Preprocessor"
          .Styles[Highlight.Preprocessor].Color = Val(Split(strVal, ",")[0])
        Case "Breakpoint"
          .Styles[Highlight.Breakpoint].Color = Val(strVal)
        Case "Current"
          .Styles[Highlight.Current].Color = Val(strVal)
        Case "Selection"
          .Styles[Highlight.Selection].Color = Val(strVal)
        Case "Highlight"
          .Styles[Highlight.Highlight].Color = Val(strVal)
        Case "CurrentLine"
          .Styles[Highlight.CurrentLine].Color = Val(strVal)
        Case "Error"
          .Styles[Highlight.Error].Color = Val(Split(strVal, ",")[0])
          
      End Select
    Next
  End With
  
End

Public Sub CheckDirs(strBaseDir As String) '' Verifica los directorios necesarios y algunos archivos como los de estilo CSS para mostrar los archivos HTML generados.
  
  strTextDir = strBaseDir &/ "OEBPS/Text"
  strImagesDir = strBaseDir &/ "OEBPS/Images"
  strStylesDir = strBaseDir &/ "OEBPS/Styles"
  
  strTmpDir = strBaseDir &/ "tmp" ' Ni este directorio ni su contenido se pasara al archivo epub,  es solo para almacenar los archivos de texto extraídos del PDF.
  
  'Verificar la existencia de los directorios
  If Exist(strBaseDir) = False Then
    Try Mkdir strBaseDir
    Wait 0.01
  Endif
  
  '2) Creación del direcotrio "OEBPS"
  If Exist(strBaseDir &/ "OEBPS") = False Then
    Try Mkdir strBaseDir &/ "OEBPS"
    Wait 0.01
  Endif
  
  '3) Creacion de direcotrios dentro de "OEBPS"
  If Exist(strImagesDir) = False Then
    Try Mkdir strImagesDir
    Wait 0.01
  Endif
  
  If Exist(strTextDir) = False Then
    Try Mkdir strTextDir
    Wait 0.01
  Endif
  
  If Exist(strStylesDir) = False Then
    Try Mkdir strStylesDir
    Wait 0.01
  Endif
  
  If Exist(strTmpDir) = False Then
    Try Mkdir strTmpDir
    Wait 0.01
  Endif
  
  ' Verificacion de la existencia de los archivos de estilo xhtml
  If Exist(strStylesDir &/ "style.css") = False Then
    Try Copy "style-clear.css" To strStylesDir &/ "style.css"
    Wait 0.01
  Endif
  
  ' Creacion del archivo mime
  File.Save(strBaseDir &/ "mimetype", "application/epub+zip")
  ' Creacion del archivo META-INF
  
  'Copiando el script para cerar ebook
  If Exist(User.Home &/ "." & Application.Name &/ "mbook.sh") = False Then
    Try Copy "mbook.sh" To User.Home &/ "." & Application.Name &/ "mbook.sh"
    Wait 0.01
  Endif
  
End

Public Sub UpdateInfo()
  
  ' Dim strQtyImg As String
  ' Dim strQtyPgs As String
  '
  ' strQtyPgs = CStr(inxPages.Count)
  ' strQtyImg = CStr(stxPImages.Count)
  '
  ' Select bolLoaded
  '   Case False
  '     strClocky = GEFUtility.Clocky(strClocky)
  '     Label1.Text = ("Cargando la página") & " " & CStr(intPage + 1) & " " & ("de") & " " & strQtyPgs & " - " & ("Imagenes") & ": " & strQtyImg & "  " & strClocky
  '   Case True
  '     Label1.Text = ("Cargado") & ". " & ("Páginas") & " = " & strQtyPgs & " - " & ("Imagenes") & " = " & strQtyImg
  ' End Select
  '
  ' Label1.Refresh
  
End

Public Function WriteChapters() As Integer '' Funcion que crea los archivos de texto en base al contenido disponible en stxContent
  
  ' Dim int As Integer
  ' Dim intCap As Integer
  ' Dim intCount As Integer
  ' Dim strCap As String
  ' Dim strChapName As String
  ' Dim strChapCode As String
  ' Dim strChapTitle As String
  '
  ' ' Agrupando 16 páginas por capítulo, un cuadernillo de 4 hojas
  ' intCap = 0
  ' intCount = 0
  '
  ' For int = 0 To stxContent.Max
  '
  '   strTxtFile = strPagesDir &/ Format(int + 1, "0000") & ".txt"
  '   File.Save(strTxtFile, stxContent[int])
  '
  '   Select intCount
  '     Case 0
  '       strCap = ""
  '       strCap &= stxContent[int] & "\n"
  '       Inc intCount
  '
  '     Case stxContent.Max, 16
  '       strCap &= stxContent[int] & "\n"
  '       'Esto guarda el capítulo y le envuelve el contenido con el encabezado XHTML v 1.0
  '       Inc intCap
  '       strChapName = strTextDir &/ "Section" & Format(intCap, "0000") & ".xhtml"
  '       strChapTitle = ("Capítulo") & " " & CStr(intCap)
  '
  '       strChapCode = GEFEpub.SectionMaker("chapter", ["chapter\t" & strChapTitle, "content\t" & strCap])
  '
  '       If Exist(strChapName) Then
  '         Try Kill strChapName
  '         Wait 0.01
  '
  '       Endif
  '
  '       File.Save(strChapName, strChapCode)
  '
  '       stxChap.Add(strChapName)
  '       intCount = 1
  '
  '     Case Else
  '       strCap &= stxContent[int] & "\n"
  '       Inc intCount
  '   End Select
  '
  ' Next
  '
  ' Return intCap
  
End

Public Sub ReadPage(strPDF As String, Optional inxPages As Integer[]) '' Extrae y formatea texto de todo un PDF o de una lista de paginas de este si se indica en el sgundo argumento.
  
  Dim int As Integer
  Dim intQty As Integer           ' Cantidad de páginas
  Dim inxPgx As New String[]      ' Lista de paginas a procesar
  Dim strTxtRaw As String         ' Texto en bruto de una pagina.
  Dim strTxtHtml As String        ' Contenido de la pagina formateado
  
  Dim stxImages As New String[]   ' Lista de imágenes
  Dim intImgx As Integer          '
  Dim strImageName As String
  
  Dim strExtrDir As String
  Dim strFilePage As String
  
  inxPgx.Clear
  
  If Exist(strPDF) = True Then
    pdfFile.Open(strPDF)
    intQty = pdfFile.Count
  Endif
  pdfFile.Close
  
  If inxPages Then
    Select inxPages.Count
      Case 0
        For int = 1 To intQty
          inxPgx.Add(int)
        Next
    End Select
  Else
    For int = 1 To intQty
      inxPgx.Add(int)
    Next
  Endif
  
  For int = 0 To inxPgx.Max
    ' Optar por el método de extracción de texto, OCR con Tesseract o PDF2Text de la libreria Poppler
    strTxtRaw = GEFBatch.PDF2Text(strPDF, inxPgx[int], strTmpDir)
    strFilePage = strTmpDir &/ Format(int + 1, "0000") & ".txt"
    
    Select strTxtRaw
      Case "\x0C", "\x0C\x0C"
        ' Es el texto que se obtendría de un PDF del tiopo imagen que no contiene texto y por lo tanto se procede a hacer un OCR
        strTxtRaw = GEFBatch.PDFOCRText(strPDF, inxPgx[int] - 1, strLang)
    End Select
    
    If strTxtRaw <> "" Then
      stxImages.Clear
      strExtrDir = GEFBatch.PDFExtractImages(strPDF, inxPgx[int], strImagesDir)
      stxImages.Clear
      If strExtrDir = strImagesDir Then
        stxImages = GEFUtility.RListFiles(strImagesDir, ["png"], False)
      Endif
      strTxtHtml = ""
      strTxtHtml = GEFValidator.Paragraph(strTxtRaw, "html")
      If stxImages.Count > 0 Then
        For intImgx = 0 To stxImages.Max
          strImageName = File.Name(stxImages[intImgx])
          If Split(File.BaseName(strImageName), "-")[0] = Format(inxPgx[int], "0000") Then
            ' La etiqueta de imagen para el XHTML
            strTxtHtml &= "\n<p></p>\n"
            strTxtHtml &= "<img src=\"../Images/" & strImageName & "\"" & " alt=\"" & strImageName & "\"/>"
            strTxtHtml &= "\n<p></p>"
          Endif
        Next
      Endif
      
    Endif
    stxPages.Add(strFilePage)
    File.Save(strFilePage, strTxtHtml)
  Next
  
End

Public Sub ShowText() '' Muestra el contenido de las páginas leídas.
  
  ' ' Nombre de los archivos extraídos página
  ' strHtmlPage = strPagesDir &/ Format(intPage, "0000") & ".txt"
  '
  ' If Exist(strHtmlPage) = False Then
  '
  '   Read(intPage)
  '
  ' Endif
  '
  ' Wait 0.01
  '
  ' ' Carga del testo extraído en los controles
  ' TextLabel1.Text = File.Load(strHtmlPage)
  ' TextLabel1.Refresh
  '
  ' TextEditor1.ShowLineNumber = True
  ' TextEditor1.Load(strHtmlPage)
  ' TextEditor1.Highlight = "html"
  ' 'TextEditor1.Wrap = True
  
End

' Public Sub DocumentView1_Layout(Page As Integer)
'   'Este evento se llama para cada página
'   'Pero si no se define para una página, entonces DocumentView usa las propiedades pageheight y pagewidth
'   'Puedes simplemente definir Pageeight, las propiedades de PageWidth y no usar este identificador de evento.
'
'   DocumentView1.Layout.Width = pdfFile[intPage].Width
'   DocumentView1.Layout.Height = pdfFile[intPage].Height
'
' End

' Public Sub DocumentView1_Draw(Page As Integer, Width As Integer, Height As Integer)
'
'   Paint.DrawImage(pdfFile[intPage].Image, 0, 0, Paint.Width, Paint.Height)
'
' End

' Public Sub ResetAll()
'
'   Dim strDir As String
'   Dim stxDelete As New String[]
'   Dim stxTmp As New String[]
'   Dim int As Integer
'
'   'Borrando los archivos del directorio de trabajo
'   strDir = File.Dir(strDJob)
'   stxDelete = GEFUtility.RListFiles(strDJob, ["txt", "xhtml", "html"], True)
'
'   For int = 0 To stxDelete.Max
'     Try Kill stxDelete[int]
'   Next
'
'   'Borrando los archivos del directorio /tmp
'   strDir = File.Dir(strDJob)
'   stxTmp = GEFUtility.RListFiles("/tmp", ["png"])
'
'   For int = 0 To stxTmp.Max
'     Try Kill stxTmp[int]
'   Next
'
' End

Public Sub tobMetaEdit_Click()
  
  If strJOB <> "" Then
    FMeta.ShowDialog()
  Endif
  
End

Public Sub mnuExit_Click()
  
  Me.Close
  
End

' Public Sub cboImgMod_Change()
'
'   strImgMod = cboImgMod.Text
'
' End

Public Sub TextEditor1_MouseUp()
  
  'HSplit2.Layout = [1, 1, 7]
  
  intEndPos = TextEditor1.Column
  intEndLine = TextEditor1.Line
  
  'TexEdStat()
  
End

Public Sub TexEdStat()
  '
  ' strBefText = TextEditor1.Text
  ' strSelText = TextEditor1.Selected
  ' 'strAftText =
  '
  ' Dim obj As Object
  ' Dim prop As Class
  '
  ' obj = TextEditor1
  '
  ' For Each prop In obj.Class
  '
  '   Print prop.Name
  '
  ' Next
  ' Print "SelectedText: " & TextEditor1.SelectedText
  ' Print TextEditor1.SelectedText
  
  Print "Línea: " & TextEditor1.Line & " Columna: " & TextEditor1.Column
  Print "Texto: " & TextEditor1[TextEditor1.Line].Text
  Print "Texto seleccionado: " & TextEditor1.SelectedText
  
End

Public Sub tobSaveEPUB_Click()
  
  SaveEPUB()
  
End

Public Sub mnuSaveEPUB_Click()
  
  SaveEPUB()
  
End

Public Function SaveEPUB() As String  ''Guarda un archivo EPUB usando dos variables globales, el primero es la ruta al direcorio de maquetación y el segundo es la ruta del archivo .epub.
  
  ' Dim strEpubPath As String
  ' Dim strMeta As String
  '
  ' Select strBaseDir
  '   Case ""
  '     'skip
  '   Case Else
  '
  '     ' Elegir el nombre y ubicacion del archivo EPUB, se sugerira autor-titulo, si esta habilitada la opción.
  '     Select strEPUB
  '       Case ""
  '         Dialog.SaveFile()
  '         If Dialog.Path <> "" Then
  '           If String.LCase(File.Ext(Dialog.Path)) = "epub" Then
  '             strEPUB = Dialog.Path
  '           Else
  '             strEPUB = File.Dir(Dialog.Path) &/ File.BaseName(Dialog.Path) & ".epub"
  '           Endif
  '         Endif
  '     End Select
  '
  '     'x) Creación del direcotrio "META-INF"
  '     If Exist(strBaseDir &/ "META-INF") = False Then
  '       Try Mkdir strBaseDir &/ "META-INF"
  '       Wait 0.01
  '     Endif
  '
  '     'x.1) Creacion del archivo container.xml dentro de "META-INF"
  '     File.Save(strBaseDir &/ "META-INF" &/ "container.xml", GEFEpub.CreateMeta())
  '
  '     ' Crear los capítulos, si existen se borran y se crean nuevos
  '     WriteChapters()
  '
  '     If stxChap.Count > 0 Then
  '
  '       strMeta = GEFEpub.CreateOPF([""], stxChap, stxPImages)
  '       File.Save(strJOB &/ "book/OEBPS" &/ "content.opf", strMeta)
  '
  '       strEpubPath = GEFEpub.CreateEPUB(strJOB, strEPUB)
  '
  '       Wait 0.01
  '
  '       If strEpubPath = strEPUB Then
  '
  '         Desktop.Open(strEPUB)
  '       Else
  '         Message.Error(("Error al crear el archivo"))
  '
  '       Endif
  '     Endif
  ' End Select
  
End

' Public Sub TextEditor1_GotFocus()
'
'   TexEdStat()
'
' End

Public Sub TextEditor1_KeyRelease()
  
  'Select Key.Code
  'Print Key.Code
  
  '    Print Key.Code
  
  'End Select
  
End

' Public Sub DocumentView2_MouseDown()
'
'   Dim obj As Object
'
'   'Dim child As Control
'
'   obj = DocumentView2
'
'   'Print DocumentView2.Children
'
'   ' Next
'
'   'For Each nexChild In child.Children
'   'Print nexChild.Nam
'   'Next
'
'   'Next
'
' End

' Public Sub DocumentView2_Drag()
'
'   Print Drag.Paste("text/plain")
'
' End

' Public Sub DocumentView2_DragMove()
'
'   Print Drag.Paste("text/plain")
'
' End

Public Sub TreeView1_Select()
  
  ' Dim strKey As String
  '
  ' strKey = TreeView1.Key
  '
  ' Select strKey
  '   Case "pages"
  '     TextEditor1.Clear
  '     TextLabel1.Text = ""
  '     TextLabel1.Refresh
  '   Case Else
  '     ' Variable global de la pagina actual
  '     intPage = CInt(strKey)
  '     TextEditorLoad(strKey)
  '     TextLabelLoad(strKey)
  ' End Select
  
End

Public Sub TextLabelLoad()
  
  Dim str As String
  
  If Exist(strTextFile) = True Then
    str = Replace(File.Load(strTextFile), "../Images", strImagesDir)
    TextLabel1.Text = str
  Endif
  
End

Public Sub TextEditorLoad()
  
  If Exist(strTextFile) = True Then
    TextEditor1.Load(strTextFile)
  Endif
  
End

Public Function ChangeTag(str As String, strTag As String) As String
  
  Dim stxTags As New String[]
  ' Dim stxParts As New String[]
  Dim strTagTmp As String
  Dim strText As String
  Dim strOut As String
  Dim tag As String
  
  stxTags.Insert(["h1", "h2", "h3", "h4", "h5", "h6", "p"])
  
  '  stxParts = Split(str, "><")
  str = Replace(str, "</", "\t")
  str = Replace(str, "<", "")
  str = Replace(str, ">", "\t")
  
  If InStr(str, "\t") > 0 Then
    strTagTmp = Split(str, "\t")[0]
    strText = Split(str, "\t")[1]
    
    For Each tag In stxTags
      If tag = String.LCase(strTag) Then
        strOut = "<" & tag & ">" & strText & "</" & tag & ">"
        Break
        
      Endif
    Next
  Else
    strOut = "<" & strTag & ">" & str & "</" & strTag & ">"
  Endif
  
  Return strOut
  
End

Public Function HideToggle(str As String) As String '' Funcion que oculta una linea de codigo HTML o la muestra en caso que ya lo este.
  
  Dim strOut As String
  
  If InStr(str, "<!---") > 0 Then
    
    strOut = Replace(str, "<!---", "")
    strOut = Replace(strOut, "--->", "")
  Else
    strOut = "<!---" & str & "--->"
  Endif
  Return strOut
  
End

Public Sub Tags_Click()
  
  Dim str As String
  Dim obj As Object
  
  obj = Last
  str = TextEditor1[intIniLine].Text
  
  TextEditor1[intIniLine].Text = ChangeTag(str, obj.Tag)
  
End

Public Sub TreeView2_Select()
  
  Dim strKey As String
  
  strKey = TreeView2.Key
  lblInfo.Text = strKey
  'Print strKey
  
  TreeView2["epub"].Text = stxMVals[0]
  
  Select strKey
    Case "", "epub", "css", "png", "xhtml", "txt"
      ' Estos son los nodos
      EditorMode("none")
      strTextFile = ""
    Case Else
      ' Variable global de la pagina actual
      If Exist(strKey) = True Then
        
        Select File.Ext(strKey)
            
          Case "css"
            EditorMode("editor")
            PictureBox1.Visible = False
            strTextFile = strKey
            TextEditor1.Highlight = "css"
            
            TextEditorLoad()
            TextLabelLoad()
            
          Case "png"
            EditorMode("image")
            If Exist(strKey) = True Then
              PictureBox1.Visible = True
              PictureBox1.Picture = Picture.Load(strKey)
              
            Endif
            
          Case "xhtml"
            strTextFile = strKey
            PictureBox1.Visible = False
            
            Select strEditorMode
              Case "editor"
                TextEditor1.Highlight = "html"
                TextEditorLoad()
              Case "render", "none"
                strEditorMode = "render"
                EditorMode(strEditorMode)
                TextLabelLoad()
            End Select
            Wait 0.01
            EditorMode(strEditorMode)
            
          Case "txt"
            EditorMode("editor")
            PictureBox1.Visible = False
            strTextFile = strKey
            TextEditor1.Highlight = "html"
            
            TextEditorLoad()
            TextLabelLoad()
            
        End Select
        
      Endif
      
  End Select
  
End

Public Sub ProgramMode(strMode As String) '' Cambia el estado de activación de los controles de acuerdo a las posibilidades del escenario actual.
  
  Select strMode
      
    Case "init"
      tobNewEPUB.Enabled = True
      mnuNewEPUB.Enabled = True
      tobOpenEPUB.Enabled = True
      tobSaveEPUB
      
      tobOpenJobDirectory
      tobSaveModel
      tobSaveModelAs
      
    Case "epub"
      
    Case "model"
      
  End Select
  
End

Public Sub EditorMode(strMode As String)  '' Cambia el estado de activación de los controles de acuerdo al modo del editor.
  
  Select strMode
    Case "editor"
      tobMode.Enabled = True
      pnlTools.Enabled = True
      pnlCodeTools.Enabled = True
      PictureBox1.Visible = False
      ScrollView1.Visible = False
      TextEditor1.Visible = True
      
    Case "render"
      tobMode.Enabled = True
      pnlTools.Enabled = True
      pnlCodeTools.Enabled = False
      PictureBox1.Visible = False
      ScrollView1.Visible = True
      TextEditor1.Visible = False
      
    Case "image"
      tobMode.Enabled = False
      pnlTools.Enabled = False
      pnlCodeTools.Enabled = False
      PictureBox1.Visible = True
      ScrollView1.Visible = False
      TextEditor1.Visible = False
      
    Case "audio"
      
    Case "none"
      tobMode.Enabled = False
      pnlTools.Enabled = False
      pnlCodeTools.Enabled = False
      PictureBox1.Visible = False
      ScrollView1.Visible = False
      TextEditor1.Visible = False
      
    Case "import"
      
      tobMode.Enabled = False
      pnlTools.Enabled = False
      pnlCodeTools.Enabled = False
      PictureBox1.Visible = False
      ScrollView1.Visible = False
      TextEditor1.Visible = False
      
  End Select
  
End

Public Sub tobMode_Click()
  
  'Print tobMode.Value
  
  Select tobMode.Value
    Case True
      strEditorMode = "editor"
      EditorMode(strEditorMode)
      TextEditorLoad()
      
    Case False
      strEditorMode = "render"
      EditorMode(strEditorMode)
      TextLabelLoad()
      
  End Select
  
  Wait 0.01
  
End

Public Sub TextEditor1_Cursor()
  
  intPosLine = TextEditor1.Line
  intPosColu = TextEditor1.Column
  
  strLineText = TextEditor1[intPosLine].Text
  Select String.Len(strLineText)
    Case 0
      strBefText = ""
      strAftText = ""
    Case Else
      strBefText = String.Mid(strLineText, 1, intPosColu + 1)
      strAftText = String.Mid(strLineText, intPosColu + 1)
  End Select
  
End

Public Sub TextEditor1_KeyPress()
  
  Dim strShCut As String
  'Dim strPaste As String
  Dim strBefore As String
  Dim strAfter As String
  
  strShCut = String.LCase(Shortcut.FromKey())
  
  Select strShCut
    Case "ctrl+v"
      
      Paste()
      
  End Select
  
End

Public Sub mnuPaste_Click()
  
  Paste()
  
End

Public Sub togPaste_Click()
  
  Paste()
  
End

Public Sub Paste()
  
  Dim strPaste As String
  
  If Clipboard.Type = Clipboard.Text Then
    strPaste = Clipboard.Paste("text/plain")
  Endif
  
  TextEditor1[intIniLine].Text = strBefText & strPaste & strAftText
  
End

Public Sub mnuImportFile_Click()
  
  NewEPUBFromFile()
  
End

Public Sub TreeView2_MouseDown()
  
  Dim strKey As String
  Dim MN, mn1, mn2, mn3 As Menu
  Dim strParent As String
  
  Select Mouse.Button
    Case 2
      strKey = TreeView2.Key
      strParent = TreeView2[TreeView2.Key].ParentKey
      
      Select strParent
        Case "txt"
          If Mouse.Right Then
            MN = New Menu(Me)
            
            With mn1 = New Menu(MN) As "Menu"
              .Caption = ("Inicio de capítulo")
              .Tag = "ini"
            End With
            With mn2 = New Menu(MN) As "Menu"
              .Caption = ("Interior de capítulo")
              .Tag = "mid"
            End With
            With mn3 = New Menu(MN) As "Menu"
              .Caption = ("Fin de capítulo")
              .Tag = "end"
            End With
            MN.Popup
          Endif
        Case "xhtml"
          If Mouse.Right Then
            MN = New Menu(Me)
            
            With mn1 = New Menu(MN) As "Menu"
              .Caption = ("Abrir con editor externo")
              .Tag = "edit"
            End With
            MN.Popup
          Endif
      End Select
      
  End Select
  
End

Public Sub Menu_Click()
  
  Dim stxDefaultApps As New String[]
  
  Select Case Last.Tag
    Case "ini"
      TreeView2[TreeView2.Key].Text = "" & File.Name(TreeView2.Key)
      TreeView2[TreeView2.Key].Foreground = Color.DarkGreen
    Case "mid"
      TreeView2[TreeView2.Key].Text = " " & File.Name(TreeView2.Key)
      TreeView2[TreeView2.Key].Foreground = Color.Foreground
    Case "edit"
      stxDefaultApps = GEFSys.Mimex("text/plain")
      If stxDefaultApps.Count > 0 Then
        Shell stxDefaultApps[0] & " " & strTextFile
      Else
        Message.Warning(("Esta intentando editar de forma externa un archivo de texto, pero en su sistema no hay un editor asociado") & ".")
      Endif
      
  End Select
  
End

Public Function DirOptimizer(strPath As String) As Boolean ''Analiza si el directorio que se le pasa como paramentro de entrada es un direcotio de un proyecto Ebook Optimizer.
  
  Dim str As String
  Dim bolOut As Boolean
  
  str = ""
  
  ' Hay que acertar en todo para dar el ok
  If Exist(strPath &/ "OEBPS") = True Then
    str = "1"
    If Exist(strPath &/ "mimetype") = True Then
      str &= "2"
      If Exist(strPath &/ "OEBPS/Images") = True Then
        str &= "3"
        If Exist(strPath &/ "OEBPS/Styles") = True Then
          str &= "4"
          If Exist(strPath &/ "OEBPS/Text") = True Then
            str &= "5"
          Endif
        Endif
      Endif
    Endif
  Endif
  
  If str = "12345" Then
    bolOut = True
  Endif
  
  Return bolOut
  
End

Public Sub TreeView2_Arrange()
  
  If stxMVals.Count > 0 Then
    TreeView2["epub"].Text = stxMVals[0]
  Endif
  
End

Public Sub togCleaner_Click()
  
  XhtmlClener(strTextFile)
  
End

' Public Sub PicRenamer(strFile As String)
'
'   Dim stx As New String[]
'
'   If File.Ext(strFile) = "xhtml" Then
'     stx = Split(File.Load(strFile), "\n")
'     For Each strLine In stx
'       If InStr(strLine, "<img src=")
'       Next
'     Endif
'
' End

Public Sub XhtmlClener(strFile As String)
  
  Dim stx As New String[]
  Dim strImg As String
  Dim strChap As String
  Dim int As Integer
  Dim intK As Integer
  Dim strImgRen As String
  
  If File.Ext(strFile) = "xhtml" Then
    stx = Split(File.Load(strFile), "\n")
    intK = 0
    For int = 0 To stx.Max
      strimg = ""
      stx[int] = Replace(stx[int], "<p class=\"calibre1\">", "<p>")
      stx[int] = Replace(stx[int], " class=\"calibre4\"", "")
      stx[int] = Replace(stx[int], "<i class=\"calibre2\">", "<i>")
      stx[int] = Replace(stx[int], "<b class=\"calibre3\">", "<b>")
      stx[int] = Replace(stx[int], "<body class=\"calibre\">", "<body>")
      
      If InStr(stx[int], "<img src=") > 0 Then
        
        Inc intK
        
        strImg = GEFUtility.Between(stx[int], "<img src=\"", "\"")
        strImgRen = File.BaseName(strFile) & Format(intK, "0000") & ".png"
        
        If Exist(strImagesDir &/ strImg) Then
          stx[int] = Replace(stx[int], strImg, "../Images/" & strImgRen)
          Try Move strImagesDir &/ strImg To strImagesDir &/ strImgRen
        Endif
      Endif
    Next
    File.Save(strFile, stx.Join("\n"))
    
  Endif
  
End

Public Sub mnuAbout_Click()
  
  GEFAbout.ShowModal()
  
End
